// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using CMS.Data.ModelsStore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace CMS.Data.DataEntity
{
    public partial class CmsContext : DbContext
    {
        public CmsContext()
        {
        }

        public CmsContext(DbContextOptions<CmsContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Advertising> Advertising { get; set; }
        public virtual DbSet<AdvertisingBlock> AdvertisingBlock { get; set; }
        public virtual DbSet<Article> Article { get; set; }
        public virtual DbSet<ArticleBlock> ArticleBlock { get; set; }
        public virtual DbSet<ArticleBlockArticle> ArticleBlockArticle { get; set; }
        public virtual DbSet<ArticleCategory> ArticleCategory { get; set; }
        public virtual DbSet<ArticleCategoryArticle> ArticleCategoryArticle { get; set; }
        public virtual DbSet<ArticleComment> ArticleComment { get; set; }
        public virtual DbSet<ArticleRelationArticle> ArticleRelationArticle { get; set; }
        public virtual DbSet<ArticleStatus> ArticleStatus { get; set; }
        public virtual DbSet<ArticleTop> ArticleTop { get; set; }
        public virtual DbSet<ArticleType> ArticleType { get; set; }
        public virtual DbSet<AspNetRoleClaims> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserProfiles> AspNetUserProfiles { get; set; }
        public virtual DbSet<AspNetUserRoles> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUserTokens> AspNetUserTokens { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<ReplaceChar> ReplaceChar { get; set; }
        public virtual DbSet<Setting> Setting { get; set; }

        //Entity Store
        public virtual DbSet<ArticleGetByBlockId_Result> ArticleGetByBlockId { get; set; }
        public virtual DbSet<ArticleGetTopByCategoryId_Result> ArticleGetTopByCategoryId { get; set; }
        public virtual DbSet<ArticleSearch_Result> ArticleSearch { get; set; }
        public virtual DbSet<SearchBreadCrumbByCate> SearchBreadCrumbByCate { get; set; }
        public virtual DbSet<ArticleGetNewByCategoryId_Result> ArticleGetNewByCategoryId { get; set; }
        public virtual DbSet<ArticleGetByCategoryId_Result> ArticleGetByCategoryId { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:DefaultSchema", "cms");

            modelBuilder.Entity<Advertising>(entity =>
            {
                entity.ToTable("Advertising", "dbo");

                entity.Property(e => e.CreateBy).HasMaxLength(450);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Ext).HasMaxLength(50);

                entity.Property(e => e.Image).HasMaxLength(200);

                entity.Property(e => e.IsCode).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastEditBy).HasMaxLength(450);

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Title).HasMaxLength(1000);

                entity.Property(e => e.Url)
                    .HasColumnName("URL")
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<AdvertisingBlock>(entity =>
            {
                entity.ToTable("AdvertisingBlock", "dbo");

                entity.Property(e => e.CreateBy).HasMaxLength(450);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.IsMobile).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastEditedBy).HasMaxLength(450);

                entity.Property(e => e.LastEditedDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(500);
            });

            modelBuilder.Entity<Article>(entity =>
            {
                entity.ToTable("Article", "dbo");

                entity.Property(e => e.ArticleCategoryIds).HasMaxLength(200);

                entity.Property(e => e.Author).HasMaxLength(200);

                entity.Property(e => e.BannerImage).HasMaxLength(200);

                entity.Property(e => e.Content).HasColumnType("ntext");

                entity.Property(e => e.CreateBy).HasMaxLength(450);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Image).HasMaxLength(200);

                entity.Property(e => e.ImageDescription).HasMaxLength(200);

                entity.Property(e => e.LastEditBy).HasMaxLength(450);

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.MetaDescription).HasMaxLength(500);

                entity.Property(e => e.MetaKeywords).HasMaxLength(500);

                entity.Property(e => e.MetaTitle).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(1000);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.SubTitle).HasMaxLength(200);

                entity.Property(e => e.Url)
                    .HasColumnName("URL")
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<ArticleBlock>(entity =>
            {
                entity.ToTable("ArticleBlock", "dbo");

                entity.Property(e => e.CreateBy).HasMaxLength(256);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Image).HasMaxLength(50);

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastEditedDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.StyleId).HasColumnName("Style_ID");
            });

            modelBuilder.Entity<ArticleBlockArticle>(entity =>
            {
                entity.ToTable("ArticleBlockArticle", "dbo");
            });

            modelBuilder.Entity<ArticleCategory>(entity =>
            {
                entity.ToTable("ArticleCategory", "dbo");

                entity.Property(e => e.CreateBy).HasMaxLength(500);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Image).HasMaxLength(500);

                entity.Property(e => e.LastEditedBy).HasMaxLength(500);

                entity.Property(e => e.LastEditedDate).HasColumnType("datetime");

                entity.Property(e => e.MenuColor).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.Url)
                    .HasColumnName("URL")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<ArticleCategoryArticle>(entity =>
            {
                entity.ToTable("ArticleCategoryArticle", "dbo");
            });

            modelBuilder.Entity<ArticleComment>(entity =>
            {
                entity.ToTable("ArticleComment", "dbo");

                entity.Property(e => e.Content).HasColumnType("ntext");

                entity.Property(e => e.CreateBy).HasMaxLength(450);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ArticleRelationArticle>(entity =>
            {
                entity.ToTable("ArticleRelationArticle", "dbo");
            });

            modelBuilder.Entity<ArticleStatus>(entity =>
            {
                entity.ToTable("ArticleStatus", "dbo");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<ArticleTop>(entity =>
            {
                entity.ToTable("ArticleTop", "dbo");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ArticleType>(entity =>
            {
                entity.ToTable("ArticleType", "dbo");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<AspNetRoleClaims>(entity =>
            {
                entity.ToTable("AspNetRoleClaims", "dbo");

                entity.Property(e => e.RoleId)
                    .IsRequired()
                    .HasMaxLength(450);

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AspNetRoleClaims)
                    .HasForeignKey(d => d.RoleId);
            });

            modelBuilder.Entity<AspNetRoles>(entity =>
            {
                entity.ToTable("AspNetRoles", "dbo");

                entity.Property(e => e.Name).HasMaxLength(256);

                entity.Property(e => e.NormalizedName).HasMaxLength(256);
            });

            modelBuilder.Entity<AspNetUserClaims>(entity =>
            {
                entity.ToTable("AspNetUserClaims", "dbo");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(450);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserClaims)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUserLogins>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });

                entity.ToTable("AspNetUserLogins", "dbo");

                entity.Property(e => e.LoginProvider).HasMaxLength(128);

                entity.Property(e => e.ProviderKey).HasMaxLength(128);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(450);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserLogins)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUserProfiles>(entity =>
            {
                entity.ToTable("AspNetUserProfiles", "dbo");

                entity.Property(e => e.Address).HasMaxLength(250);

                entity.Property(e => e.AvatarUrl).HasMaxLength(250);

                entity.Property(e => e.BirthDate).HasColumnType("datetime");

                entity.Property(e => e.Company).HasMaxLength(250);

                entity.Property(e => e.Department).HasMaxLength(500);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.FacebookId).HasMaxLength(50);

                entity.Property(e => e.FullName).HasMaxLength(250);

                entity.Property(e => e.LastActivityDate).HasColumnType("datetime");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.RegType).HasMaxLength(50);

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.Signature).HasMaxLength(2000);

                entity.Property(e => e.Skype).HasMaxLength(250);

                entity.Property(e => e.UserId).HasMaxLength(128);

                entity.Property(e => e.VerifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Website).HasMaxLength(250);
            });

            modelBuilder.Entity<AspNetUserRoles>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId });

                entity.ToTable("AspNetUserRoles", "dbo");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.RoleId);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUserTokens>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });

                entity.ToTable("AspNetUserTokens", "dbo");

                entity.Property(e => e.LoginProvider).HasMaxLength(128);

                entity.Property(e => e.Name).HasMaxLength(128);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserTokens)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUsers>(entity =>
            {
                entity.ToTable("AspNetUsers", "dbo");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.NormalizedEmail).HasMaxLength(256);

                entity.Property(e => e.NormalizedUserName).HasMaxLength(256);

                entity.Property(e => e.UserName).HasMaxLength(256);
            });

            modelBuilder.Entity<ReplaceChar>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ReplaceChar", "dbo");

                entity.Property(e => e.NewChar).HasMaxLength(1);

                entity.Property(e => e.OldChar).HasMaxLength(5);

                entity.Property(e => e.ReplaceCharId).HasColumnName("ReplaceChar_ID");
            });

            modelBuilder.Entity<Setting>(entity =>
            {
                entity.ToTable("Setting", "dbo");

                entity.Property(e => e.AdminName).HasMaxLength(500);

                entity.Property(e => e.DefaultLanguageId).HasColumnName("DefaultLanguage_ID");

                entity.Property(e => e.DefaultSkinId).HasColumnName("DefaultSkin_ID");

                entity.Property(e => e.Domain).HasMaxLength(100);

                entity.Property(e => e.EmailOrder).HasMaxLength(500);

                entity.Property(e => e.EmailSender).HasMaxLength(500);

                entity.Property(e => e.EmailSenderPassword).HasMaxLength(500);

                entity.Property(e => e.EmailSenderPort).HasMaxLength(500);

                entity.Property(e => e.EmailSenderSmtp)
                    .HasColumnName("EmailSenderSMTP")
                    .HasMaxLength(500);

                entity.Property(e => e.EmailSenderSsl).HasColumnName("EmailSenderSSL");

                entity.Property(e => e.EmailSupport).HasMaxLength(500);

                entity.Property(e => e.FacebookAdmin).HasMaxLength(50);

                entity.Property(e => e.FacebookAppId)
                    .HasColumnName("FacebookAppID")
                    .HasMaxLength(50);

                entity.Property(e => e.FacebookPageId)
                    .HasColumnName("FacebookPageID")
                    .HasMaxLength(50);

                entity.Property(e => e.GoogleAnalyticsCode).HasMaxLength(1000);

                entity.Property(e => e.MetaDescriptionDefault).HasMaxLength(500);

                entity.Property(e => e.MetaKeywordsDefault).HasMaxLength(500);

                entity.Property(e => e.MetaTitleDefault).HasMaxLength(500);

                entity.Property(e => e.OtherCode).HasMaxLength(1000);

                entity.Property(e => e.Telephone).HasMaxLength(500);

                entity.Property(e => e.TwitterId)
                    .HasColumnName("TwitterID")
                    .HasMaxLength(50);

                entity.Property(e => e.VbeeAppId)
                    .HasColumnName("VBeeApp_ID")
                    .HasMaxLength(200);

                entity.Property(e => e.VbeeUserId)
                    .HasColumnName("VBeeUser_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.WebsiteName).HasMaxLength(500);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}